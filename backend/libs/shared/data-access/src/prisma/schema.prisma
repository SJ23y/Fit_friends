generator client {
  provider = "prisma-client-js"
  output = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @map("id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  name  String
  email String @unique
  avatar String @default("")
  passwordHash String @map("password_hash")
  gender String
  birthDate String @map("birth_date") @default("")
  description String
  location String
  backgroundImage String  @map("background_image")
  questionnaire Questionnaire?
  role String
  reviews Review[]
  trainings Deposit[]
  purchases Purchase[]

  @@map("users")
}

model Questionnaire {
  id String @id @default(uuid()) @map("id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  userLevel String @map("user_level")
  trainType  String[] @map("train_type")
  trainDuration  String @map("train_duration")
  calorieGoal  Int @map("calorie_goal")
  caloriePerDay  Int @map("calorie_per_day")
  isReadyForTrain  Boolean @map("is_ready_for_train")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @map("user_id")

  @@map("questionnaires")
}

model Token {
  id String @id @default(uuid()) @map("id")
  createdAt  DateTime @default(now()) @map("created_at")
  tokenId String @map("token_id")
  userId String @map("user_id")
  expiresIn DateTime @map("expires_in")

  @@map("tokens")
}

model Training {
  id String @id @default(uuid()) @map("id")
  createdAt  DateTime @default(now()) @map("created_at")
  title String
  image String
  level String
  type String
  duration String
  price Int
  callorieQuantity Int @map("callorie_quantity")
  description String
  gender String
  video String
  rate Float
  coach String
  isSpecialOffer Boolean @map("is_special_offer")
  reviews Review[]
  purchases Purchase[]

  @@map("trainings")
}

model Review {
  id String @id @default(uuid()) @map("id")
  createdAt  DateTime @default(now()) @map("created_at")
  author User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id")
  train Training @relation(fields: [trainId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trainId String @map("train_id")
  rate Int
  content String

  @@map("reviews")
}

model Purchase {
  id String @id @default(uuid()) @map("id")
  createdAt  DateTime @default(now()) @map("created_at")
  type String
  train Training @relation(fields: [trainId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trainId String @map("train_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id")
  price Int
  trainCount Int @map("train_count")
  totalPrice Int @map("total_price")
  paymentType String @map("payment_type")

  @@map("purchases")
}

model Deposit {
  trainId String @map("train_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id")
  count Int

  @@id([userId, trainId])
  @@map("deposits")
}
